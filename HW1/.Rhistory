sensitivity_function (df, scored.class)
specificity_function <- function(df,scored.class){
confusion <- table(select(df, class, scored.class))
if(dim(confusion)[2] == 1){
if(colnames(confusion) == 0){
specificity <- 1
} else{
specificity <- 0
}
} else{
specificity <- confusion[1,1]/(confusion[1,1] + confusion[1,2])
}
return(specificity)
}
specificity_function(df, scored.class)
f1score_function <- function(df, scored.class){
precision <- precision_function(df, scored.class)
sensitivity <- sensitivity_function(df, scored.class)
f1score <- (2 * precision * sensitivity)/(precision + sensitivity)
return(f1score)
}
f1score_function(df, scored.class)
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in 0:100) {
df$new.scored <- ifelse(df$scored.probability < i/100, 0, 1)
sensitivityvec[i+1] <- sensitivity_function(df, new.scored)
specificityvec[i+1] <- specificity_function(df, new.scored)
}
rocdata <- data.frame(threshold = seq(0,1,by=0.01),
sensitivity = sensitivityvec,
specificity = specificityvec)
return(rocdata)
}
roc.results <- roc_function(df)
head(roc.results)
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in 0:100) {
df$new.scored <- ifelse(df$scored.probability < i/100, 0, 1)
sensitivityvec[i+1] <- sensitivity_function(df, new.scored)
specificityvec[i+1] <- specificity_function(df, new.scored)
df <- select(df -new.scored.calc)
}
rocdata <- data.frame(threshold = seq(0,1,by=0.01),
sensitivity = sensitivityvec,
specificity = specificityvec)
return(rocdata)
}
roc.results <- roc_function(df)
head(roc.results)
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in 0:100) {
df$new.scored <- ifelse(df$scored.probability < i/100, 0, 1)
sensitivityvec[i+1] <- sensitivity_function(df, new.scored)
specificityvec[i+1] <- specificity_function(df, new.scored)
df <- select(df -new.scored)
}
rocdata <- data.frame(threshold = seq(0,1,by=0.01),
sensitivity = sensitivityvec,
specificity = specificityvec)
return(rocdata)
}
roc.results <- roc_function(df)
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in 0:100) {
df$new.scored <- ifelse(df$scored.probability < i/100, 0, 1)
sensitivityvec[i+1] <- sensitivity_function(df, new.scored)
specificityvec[i+1] <- specificity_function(df, new.scored)
df <- select(df, -new.scored)
}
rocdata <- data.frame(threshold = seq(0,1,by=0.01),
sensitivity = sensitivityvec,
specificity = specificityvec)
return(rocdata)
}
roc.results <- roc_function(df)
head(roc.results)
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in 0:100) {
df$new.scored <- ifelse(df$scored.probability < i/100, 0, 1)
sensitivityvec[i+1] <- sensitivity_function(df, new.scored)
specificityvec[i+1] <- specificity_function(df, new.scored)
df <- select(df, -new.scored)
}
rocdata <- data.frame(threshold = seq(0,1,by=0.01),
sensitivity = sensitivityvec,
specificity = specificityvec)
return(sensitivityvec)
}
roc.results <- roc_function(df)
head(roc.results)
ifelse(df$scored.probability < i/100, 0, 1)
for (i in 0:100) {
df$new.scored <- ifelse(df$scored.probability < i/100, 0, 1)
}
df$new.scored
df$scored.probabilit
for (i in 0:100) {
df$new.scored <- ifelse(df$scored.probability < i/100, 0, 1)
}
df$new.scored
df$scored.probability
for (i in 0:100) {
df$new.scored <- ifelse(df$scored.probability < i/100, 0, 1)
}
df$new.scored
ifelse(df$scored.probability < i/100, 0, 1)
df$scored.probability
print(i)
for (i in 0:100) {
print(i)
df$new.scored <- ifelse(df$scored.probability < i/100, 0, 1)
}
df$scored.probability[i]
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in 0:100) {
df$new.scored <- ifelse(df$scored.probability[i] < i/100, 0, 1)
sensitivityvec[i+1] <- sensitivity_function(df, new.scored)
specificityvec[i+1] <- specificity_function(df, new.scored)
df <- select(df, -new.scored)
}
rocdata <- data.frame(threshold = seq(0,1,by=0.01),
sensitivity = sensitivityvec,
specificity = specificityvec)
return(sensitivityvec)
}
roc.results <- roc_function(df)
head(roc.results)
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in 0:100) {
df$new.scored <- ifelse(df$scored.probability[i] < i/100, 0, 1)
sensitivityvec[i+1] <- sensitivity_function(df, new.scored)
specificityvec[i+1] <- specificity_function(df, new.scored)
df <- select(df, -new.scored)
}
rocdata <- data.frame(threshold = seq(0,1,by=0.01),
sensitivity = sensitivityvec,
specificity = specificityvec)
return(rocdata)
}
roc.results <- roc_function(df)
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in 0:100) {
df$new.scored <- ifelse(df$scored.probability[i] < i/100, 0, 1)
sensitivityvec[i+1] <- sensitivity_function(df, new.scored)
specificityvec[i+1] <- specificity_function(df, new.scored)
df <- select(df, -new.scored)
}
rocdata <- data.frame(threshold = seq(0,1,by=0.01),
sensitivity = sensitivityvec,
specificity = specificityvec)
return(sensitivityvec)
}
roc.results <- roc_function(df)
head(roc.results)
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in 0:100) {
df$new.scored[i+1] <- ifelse(df$scored.probability[i+1] < i/100, 0, 1)
sensitivityvec[i+1] <- sensitivity_function(df, new.scored)
specificityvec[i+1] <- specificity_function(df, new.scored)
df <- select(df, -new.scored)
}
rocdata <- data.frame(threshold = seq(0,1,by=0.01),
sensitivity = sensitivityvec,
specificity = specificityvec)
return(rocdata)
}
roc.results <- roc_function(df)
head(roc.results)
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in 0:100) {
df$new.scored[i+1] <- ifelse(df$scored.probability[i+1] < i/100, 0, 1)
sensitivityvec[i+1] <- sensitivity_function(df, new.scored)
specificityvec[i+1] <- specificity_function(df, new.scored)
df <- select(df, -new.scored)
}
return(sensitivityvec)
}
roc.results <- roc_function(df)
head(roc.results)
df$scored.probability
df$new.scored <- ifelse(df$scored.probability < i, 0, 1)
df$new.scored
for (i in seq(0,1, 0.01)) {
df$new.scored <- ifelse(df$scored.probability < i, 0, 1)
}
df$new.scored
for (i in seq(0,1, 0.01)) {
i
df$new.scored <- ifelse(df$scored.probability < i, 0, 1)
}
for (i in seq(0,1, 0.01)) {
print(i)
df$new.scored <- ifelse(df$scored.probability < i, 0, 1)
}
ifelse(df$scored.probability < 0.01, 0, 1)
ifelse(df$scored.probability < 0.02, 0, 1)
ifelse(df$scored.probability < 0.4, 0, 1)
df$new.scored <- ifelse(df$scored.probability < 0.01, 0, 1)
df$new.scored
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in seq(0,1, 0.01)) {
df$new.scored <- ifelse(df$scored.probability < i, 0, 1)
sensitivityvec <- sensitivity_function(df, new.scored)
specificityvec <- specificity_function(df, new.scored)
df <- select(df, -new.scored)
}
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in seq(0,1, 0.01)) {
df$new.scored <- ifelse(df$scored.probability < i, 0, 1)
sensitivityvec <- sensitivity_function(df, new.scored)
specificityvec <- specificity_function(df, new.scored)
df <- select(df, -new.scored)
}
return(sensitivityvec)
}
roc.results <- roc_function(df)
head(roc.results)
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in seq(0,1, 0.01)) {
df$new.scored <- ifelse(df$scored.probability < i, 0, 1)
sensitivityvec <- sensitivity_function(df, new.scored)
specificityvec <- specificity_function(df, new.scored)
df <- select(df, -new.scored)
}
return(sensitivityvec)
}
roc.results <- roc_function(df)
head(roc.results)
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in seq(0,1, 0.01)) {
df$new.scored <- ifelse(df$scored.probability < i, 0, 1)
sensitivityvec[i*100+1] <- sensitivity_function(df, new.scored)
specificityvec[i*100+1] <- specificity_function(df, new.scored)
df <- select(df, -new.scored)
}
return(sensitivityvec)
}
roc.results <- roc_function(df)
head(roc.results)
tail(roc.results)
df$new.scored
sensitivity_function(df, new.scored)
df$new.scored <- ifelse(df$scored.probability < 1, 0, 1)
df$new.scored
sensitivity_function(df, new.scored)
df$new.scored <- ifelse(df$scored.probability < 0.5, 0, 1)
df$new.scored
sensitivity_function(df, new.scored)
sensitivity_function <- function(df, class_score){
confusion <- table(select(df, class, class_score))
if(dim(confusion)[2] == 1){
if(colnames(confusion) == 0){
sensitivity <- 0
} else{
sensitivity <- 1
}
} else{
sensitivity <- confusion[2,2]/(confusion[2,1] + confusion[2,2])
}
return(sensitivity)
}
sensitivity_function (df, scored.class)
sensitivity_function <- function(df, "class_score"){
confusion <- table(select(df, class, "class_score"))
if(dim(confusion)[2] == 1){
if(colnames(confusion) == 0){
sensitivity <- 0
} else{
sensitivity <- 1
}
} else{
sensitivity <- confusion[2,2]/(confusion[2,1] + confusion[2,2])
}
return(sensitivity)
}
sensitivity_function (df, scored.class)
sensitivity_function <- function(df, class_score){
confusion <- table(select(df, class, class_score))
if(dim(confusion)[2] == 1){
if(colnames(confusion) == 0){
sensitivity <- 0
} else{
sensitivity <- 1
}
} else{
sensitivity <- confusion[2,2]/(confusion[2,1] + confusion[2,2])
}
return(sensitivity)
}
sensitivity_function (df, scored.class)
sensitivity_function (df, df$scored.class)
sensitivity_function <- function(df, class_score){
confusion <- table(select(df, class, class_score))
if(dim(confusion)[2] == 1){
if(colnames(confusion) == 0){
sensitivity <- 0
} else{
sensitivity <- 1
}
} else{
sensitivity <- confusion[2,2]/(confusion[2,1] + confusion[2,2])
}
return(sensitivity)
}
sensitivity_function (df, df$scored.class)
df$scored.class
predicted="scored.class"
sensitivity_function <- function(df, predicted){
confusion <- table(select(df, class, predicted))
if(dim(confusion)[2] == 1){
if(colnames(confusion) == 0){
sensitivity <- 0
} else{
sensitivity <- 1
}
} else{
sensitivity <- confusion[2,2]/(confusion[2,1] + confusion[2,2])
}
return(sensitivity)
}
sensitivity_function (df, predicted)
predicted="scored.class"
sensitivity_function <- function(df, predicted){
confusion <- table(select(df, class, predicted))
if(dim(confusion)[2] == 1){
if(colnames(confusion) == 0){
sensitivity <- 0
} else{
sensitivity <- 1
}
} else{
sensitivity <- confusion[2,2]/(confusion[2,1] + confusion[2,2])
}
return(sensitivity)
}
sensitivity_function (df, predicted)
predicted="scored.class"
sensitivity_function <- function(df, predicted){
confusion <- table(select(df, class, get(predicted)))
if(dim(confusion)[2] == 1){
if(colnames(confusion) == 0){
sensitivity <- 0
} else{
sensitivity <- 1
}
} else{
sensitivity <- confusion[2,2]/(confusion[2,1] + confusion[2,2])
}
return(sensitivity)
}
sensitivity_function (df, predicted)
CER_function<- function(df, predicted){
confusion <- table(select(df, class, get(predicted))
classification_error_rate <- (confusion[1,2] + confusion[2,1])/sum(confusion)
return(classification_error_rate)
}
CER_function(df,predicted)
CER_function<- function(df, predicted){
confusion <- table(select(df, class, get(predicted))
classification_error_rate <- (confusion[1,2] + confusion[2,1])/sum(confusion)
return(classification_error_rate)
}
CER_function<- function(df, predicted){
confusion <- table(select(df, class, get(predicted)))
classification_error_rate <- (confusion[1,2] + confusion[2,1])/sum(confusion)
return(classification_error_rate)
}
CER_function(df,predicted)
accuracy_function(df,predicted) +  CER_function(df,predicted)
precision_function <- function(df, predicted){
confusion <- table(select(df, class, get(predicted)))
precision <- confusion[2,2]/(confusion[1,2] + confusion[2,2])
return(precision)
}
precision_function(df,predicted)
sensitivity_function <- function(df, predicted){
confusion <- table(select(df, class, get(predicted)))
if(dim(confusion)[2] == 1){
if(colnames(confusion) == 0){
sensitivity <- 0
} else{
sensitivity <- 1
}
} else{
sensitivity <- confusion[2,2]/(confusion[2,1] + confusion[2,2])
}
return(sensitivity)
}
sensitivity_function (df, predicted)
specificity_function <- function(df,predicted){
confusion <- table(select(df, class, get(predicted)))
if(dim(confusion)[2] == 1){
if(colnames(confusion) == 0){
specificity <- 1
} else{
specificity <- 0
}
} else{
specificity <- confusion[1,1]/(confusion[1,1] + confusion[1,2])
}
return(specificity)
}
specificity_function(df, predeicted)
specificity_function <- function(df,predicted){
confusion <- table(select(df, class, get(predicted)))
if(dim(confusion)[2] == 1){
if(colnames(confusion) == 0){
specificity <- 1
} else{
specificity <- 0
}
} else{
specificity <- confusion[1,1]/(confusion[1,1] + confusion[1,2])
}
return(specificity)
}
specificity_function(df, predicted)
f1score_function <- function(df, predicted){
precision <- precision_function(df, predicted)
sensitivity <- sensitivity_function(df, predicted)
f1score <- (2 * precision * sensitivity)/(precision + sensitivity)
return(f1score)
}
f1score_function(df, predicted)
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in seq(0,1, 0.01)) {
df$new.scored <- ifelse(df$scored.probability < i, 0, 1)
sensitivityvec[i*100+1] <- sensitivity_function(df, new.scored)
specificityvec[i*100+1] <- specificity_function(df, new.scored)
df <- select(df, -new.scored)
}
return(sensitivityvec)
}
roc.results <- roc_function(df)
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in seq(0,1, 0.01)) {
df$new.scored <- ifelse(df$scored.probability < i, 0, 1)
sensitivityvec[i*100+1] <- sensitivity_function(df, "new.scored")
specificityvec[i*100+1] <- specificity_function(df, "new.scored")
df <- select(df, -new.scored)
}
return(sensitivityvec)
}
roc.results <- roc_function(df)
head(roc.results)
sensitivityvec
ifelse(df$scored.probability < i, 0, 1)
sensitivity_function(df, "new.scored")
roc_function <- function(df){
sensitivityvec <- c()
specificityvec <- c()
for (i in seq(0,1, 0.01)) {
df$new.scored <- ifelse(df$scored.probability < i, 0, 1)
sensitivityvec[i*100+1] <- sensitivity_function(df, "new.scored")
specificityvec[i*100+1] <- specificity_function(df, "new.scored")
df <- select(df, -new.scored)
}
return(sensitivityvec)
}
roc.results <- roc_function(df)
roc.results
```{r}
roc_function <- function(df){
sensitivity_list <- c()
specificity_list <- c()
for (i in seq(0,1, 0.01)) {
df$new.scored <- ifelse(df$scored.probability < i, 0, 1)
sensitivity_list[i*100+1] <- sensitivity_function(df, "new.scored")
specificity_list[i*100+1] <- specificity_function(df, "new.scored")
}
roc_df = data.frame(threshold=seq(0,1, 0.01), sensitivity= sensitivity_list, specificity=specificity_list)
return(roc_df)
}
roc.results <- roc_function(df)
head(roc.results)
ggplot(roc.results, aes(x=1-specificity, y=sensitivity)) + geom_line() + ggtitle("ROC Curve")
ggplot(roc.results, aes(x=1-specificity, y=sensitivity)) + geom_line() + ggtitle("ROC Curve")
plot(roc_curve, col="red", main="ROC curve")
sensitivity
head(roc.results)
